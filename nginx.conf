server {
    server_name  pluggedinlife.com *.pluggedinlife.com;
    access_log /tmp/pluggedinlife.com.access.log;
    error_log /tmp/pluggedinlife.com.error.log;

	client_max_body_size 4G;

	# ~2 seconds is often enough for most folks to parse HTML/CSS and
	# retrieve needed images/icons/frames, connections are cheap in
	# nginx so increasing this is generally safe...
	keepalive_timeout 5;

	if ($host = 'www.pluggedinlife.com') {
		rewrite  ^/(.*)$  http://pluggedinlife.com/$1 permanent;
        break;
	}

    if ($host ~* "^([^.]+)\.pluggedinlife.com$"){
        set $sub $1;
        rewrite ^(.*)$ http://pluggedinlife.com/$sub permanent;
        break;
    }

    location / {
		# an HTTP header important enough to have its own Wikipedia entry:
		#   http://en.wikipedia.org/wiki/X-Forwarded-For
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# enable this if and only if you use HTTPS, this helps Rack
		# set the proper protocol for doing redirects:
		# proxy_set_header X-Forwarded-Proto https;

		# pass the Host: header from the client right along so redirects
		# can be set properly within the Rack application
		proxy_set_header Host $http_host;

		# we don't want nginx trying to do something clever with
		# redirects, we set the Host: header above already.
		proxy_redirect off;

		# set "proxy_buffering off" *only* for Rainbows! when doing
		# Comet/long-poll stuff.  It's also safe to set if you're
		# using only serving fast clients with Unicorn + nginx.
		# Otherwise you _want_ nginx to buffer responses to slow
		# clients, really.
		# proxy_buffering off;

		# Try to serve static files from nginx, no point in making an
		# *application* server like Unicorn/Rainbows! serve static files.
		if (!-f $request_filename) {
			proxy_pass http://localhost:5000;
			break;
		}
    }
    
    location /static {
        root /var/www/pluggedinlife/static/;
        expires 30d;
    }
}
